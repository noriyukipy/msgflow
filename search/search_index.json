{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SmileChat - Simple Chatbot Framework SmileChat is a simple chatbot framework written in Python for simple configuration, customization and connection with several services. SmileChat provides following simple and flexible features to develop your chatbot as fast as possible. Simple Configuration Simple Connection Simple Customization Simple Configuration SmileChat adopts YAML-formated configuration file to set up your chatbot. 1 2 3 4 5 6 7 8 9 # Service to connect service : name : smilechat.service.CliService config : user_name : you # Application to generate response app : name : app.MyApp In service , you can set up the service which you connect your chatbot. In app , you can specify your core application to generate resposne from a message got from the service defined in service . Simple Connection SmileChat provides pupular services as default. You can just specify each service in YAML configuration file to work with these services. 1 2 3 4 5 6 7 # Slack service post_service : name : smilechat.service.SlackService config : slack_api_token : ${YOUR_TOKEN_HERE} channel : ${YOUR_CHANNEL_HERE} bot_id : ${YOUR_BOT_ID_HERE} Simple Customization SmileChat provides simple and flexible customization architecture to develop your own chatbot. To implement your custom application, you only need to write you application in a specific-formatted class. 1 2 3 4 5 6 7 8 9 class MyApp : def __init__ ( self , service , config ): \"\"\"\"\"\" self . _service = service def handle ( self , message ): res = f ' { message . text } ' message . respond ( res ) self . _service . post ( f 'Log: \" { message . text } \"' ) Then, the class can be specified in your configuration file. 1 2 app : name : app.MyApp Dive into SmileChat! Let's get started to work with SmileChat! Other documents are also available: Development - how to build document, test code Changelog","title":"Home"},{"location":"#smilechat-simple-chatbot-framework","text":"SmileChat is a simple chatbot framework written in Python for simple configuration, customization and connection with several services. SmileChat provides following simple and flexible features to develop your chatbot as fast as possible. Simple Configuration Simple Connection Simple Customization","title":"SmileChat - Simple Chatbot Framework"},{"location":"#simple-configuration","text":"SmileChat adopts YAML-formated configuration file to set up your chatbot. 1 2 3 4 5 6 7 8 9 # Service to connect service : name : smilechat.service.CliService config : user_name : you # Application to generate response app : name : app.MyApp In service , you can set up the service which you connect your chatbot. In app , you can specify your core application to generate resposne from a message got from the service defined in service .","title":"Simple Configuration"},{"location":"#simple-connection","text":"SmileChat provides pupular services as default. You can just specify each service in YAML configuration file to work with these services. 1 2 3 4 5 6 7 # Slack service post_service : name : smilechat.service.SlackService config : slack_api_token : ${YOUR_TOKEN_HERE} channel : ${YOUR_CHANNEL_HERE} bot_id : ${YOUR_BOT_ID_HERE}","title":"Simple Connection"},{"location":"#simple-customization","text":"SmileChat provides simple and flexible customization architecture to develop your own chatbot. To implement your custom application, you only need to write you application in a specific-formatted class. 1 2 3 4 5 6 7 8 9 class MyApp : def __init__ ( self , service , config ): \"\"\"\"\"\" self . _service = service def handle ( self , message ): res = f ' { message . text } ' message . respond ( res ) self . _service . post ( f 'Log: \" { message . text } \"' ) Then, the class can be specified in your configuration file. 1 2 app : name : app.MyApp","title":"Simple Customization"},{"location":"#dive-into-smilechat","text":"Let's get started to work with SmileChat! Other documents are also available: Development - how to build document, test code Changelog","title":"Dive into SmileChat!"},{"location":"CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] Fixed Fix slack response to send system text [0.1.0] - 2020-07-18 Added Custom application architecture New services: CliService, SlackService and TwitterSampleStreamService YAML parser to inject environment variables","title":"Change Log"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"[Unreleased]"},{"location":"CHANGELOG/#fixed","text":"Fix slack response to send system text","title":"Fixed"},{"location":"CHANGELOG/#010-2020-07-18","text":"","title":"[0.1.0] - 2020-07-18"},{"location":"CHANGELOG/#added","text":"Custom application architecture New services: CliService, SlackService and TwitterSampleStreamService YAML parser to inject environment variables","title":"Added"},{"location":"development/","text":"Development Building Documents The document is provided by MkDocs and published by gh-pages . First, build your document to convert markdown files to HTML files. 1 $ bash docs_builder.sh build Then built files are placed in docs/site . After checking the content, run gh-pages to commit on gh-pages and push to GitHub. 1 $ GIT_USER = \"Your Name <email@example.com>\" bash docs_builder.sh publish Test 1 $ circleci local execute --job test-small","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#building-documents","text":"The document is provided by MkDocs and published by gh-pages . First, build your document to convert markdown files to HTML files. 1 $ bash docs_builder.sh build Then built files are placed in docs/site . After checking the content, run gh-pages to commit on gh-pages and push to GitHub. 1 $ GIT_USER = \"Your Name <email@example.com>\" bash docs_builder.sh publish","title":"Building Documents"},{"location":"development/#test","text":"1 $ circleci local execute --job test-small","title":"Test"},{"location":"getting_started/","text":"Getting Started SmileChat is a chatbot framework to work with several services (Slack, Twitter, CLI). Installation 1 $ pip install git+https://github.com/noriyukipy/smilechat Your First App To run your chatbot, SmileChat requires config and app files. init provides you default config and app files. To place these files, create working directory first and change directory there. 1 2 $ mkdir work $ cd work Then run init command to generate default config and app templates. 1 2 3 4 $ python -m smilechat.main init $ ls -1 app.py config.yml Then execute run command which enables you to talk with SmileChat via stdin/stdout. 1 2 3 4 5 6 $ python -m smilechat.main run --config_file = config.yml INFO:root: \"post_service\" is not defined in config file. \"service\" is used for \"post_service\" instead. you> Hi bot> This is a response to \"Hi\" This is a post to \"Hi\" you> Services Name Description Stream Post Respond to message smilechat.service.CliService CLI service to work with stdin and stdout smilechat.service.SlackService Slack service to work with Slack smilechat.service.TwitterSampleStreamService Twitter sample stream service to get messages from sample stream Architecture Basic architecture to communicate with a service. 1 2 3 4 5 6 get message <-------------- App Service --------------> * respond to message * post Use different service depending on respond and post 1 2 3 4 5 6 7 8 get message <-------------- App Service | --------------> | respond to message | |------------------> Service post","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"SmileChat is a chatbot framework to work with several services (Slack, Twitter, CLI).","title":"Getting Started"},{"location":"getting_started/#installation","text":"1 $ pip install git+https://github.com/noriyukipy/smilechat","title":"Installation"},{"location":"getting_started/#your-first-app","text":"To run your chatbot, SmileChat requires config and app files. init provides you default config and app files. To place these files, create working directory first and change directory there. 1 2 $ mkdir work $ cd work Then run init command to generate default config and app templates. 1 2 3 4 $ python -m smilechat.main init $ ls -1 app.py config.yml Then execute run command which enables you to talk with SmileChat via stdin/stdout. 1 2 3 4 5 6 $ python -m smilechat.main run --config_file = config.yml INFO:root: \"post_service\" is not defined in config file. \"service\" is used for \"post_service\" instead. you> Hi bot> This is a response to \"Hi\" This is a post to \"Hi\" you>","title":"Your First App"},{"location":"getting_started/#services","text":"Name Description Stream Post Respond to message smilechat.service.CliService CLI service to work with stdin and stdout smilechat.service.SlackService Slack service to work with Slack smilechat.service.TwitterSampleStreamService Twitter sample stream service to get messages from sample stream","title":"Services"},{"location":"getting_started/#architecture","text":"Basic architecture to communicate with a service. 1 2 3 4 5 6 get message <-------------- App Service --------------> * respond to message * post Use different service depending on respond and post 1 2 3 4 5 6 7 8 get message <-------------- App Service | --------------> | respond to message | |------------------> Service post","title":"Architecture"}]}